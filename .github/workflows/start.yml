name: Start Command

on:
  issue_comment:
    types: [created]

jobs:
  start-issue:
    if: |
      github.event.issue.pull_request == null &&
      startsWith(github.event.comment.body, '/start issue')
    runs-on: ubuntu-latest
    
    permissions:
      issues: write
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Parse command
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.trim();
            
            // Match two patterns:
            // 1. /start issue [number] [--from-branch branch]
            // 2. /start issue [--from-branch branch]
            const explicitMatch = comment.match(/\/start issue\s+(\d+)(?:\s+--from-branch\s+(\S+))?/);
            const implicitMatch = comment.match(/\/start issue(?:\s+--from-branch\s+(\S+))?$/);
            
            let issueNumber;
            let explicitBranch = null;
            
            if (explicitMatch) {
              // Explicit issue number provided
              issueNumber = explicitMatch[1];
              explicitBranch = explicitMatch[2] || null;
            } else if (implicitMatch) {
              // No issue number provided, use current issue
              issueNumber = context.issue.number;
              explicitBranch = implicitMatch[1] || null;
            } else {
              core.setFailed('Invalid command format. Use: /start issue [number] [--from-branch branch]');
              return;
            }
            
            // If no explicit branch specified, we'll determine it later
            core.setOutput('issue_number', issueNumber);
            core.setOutput('explicit_branch', explicitBranch || '');
            
            console.log(`üìã Issue: #${issueNumber}`);
            if (explicitBranch) {
              console.log(`üìå Explicit base branch: ${explicitBranch}`);
            } else {
              console.log(`üìå Will auto-detect base branch (prefer develop/dev, fallback to main)`);
            }
            
      - name: Determine base branch
        id: base_branch
        uses: actions/github-script@v7
        with:
          script: |
            const explicitBranch = '${{ steps.parse.outputs.explicit_branch }}';
            
            if (explicitBranch) {
              // User specified a branch, use it
              core.setOutput('from_branch', explicitBranch);
              console.log(`Using explicit branch: ${explicitBranch}`);
              return;
            }
            
            // Auto-detect branch
            try {
              // Get all branches
              const { data: branches } = await github.rest.repos.listBranches({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100
              });
              
              const branchNames = branches.map(b => b.name);
              console.log(`Available branches: ${branchNames.join(', ')}`);
              
              // Check for develop/dev branch
              let fromBranch = 'main';
              if (branchNames.includes('develop')) {
                fromBranch = 'develop';
                console.log('Found develop branch, using it as base');
              } else if (branchNames.includes('dev')) {
                fromBranch = 'dev';
                console.log('Found dev branch, using it as base');
              } else if (branchNames.includes('main')) {
                fromBranch = 'main';
                console.log('Using main branch as base');
              } else if (branchNames.includes('master')) {
                fromBranch = 'master';
                console.log('Using master branch as base');
              } else {
                // Use the default branch
                const { data: repo } = await github.rest.repos.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                fromBranch = repo.default_branch;
                console.log(`Using default branch: ${fromBranch}`);
              }
              
              core.setOutput('from_branch', fromBranch);
            } catch (error) {
              console.error('Error detecting branch, using main as fallback:', error);
              core.setOutput('from_branch', 'main');
            }
            
      - name: Get issue details
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ steps.parse.outputs.issue_number }};
            
            // Get issue details
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber)
            });
            
            // Extract type from labels
            const typeLabel = issue.labels.find(l => l.name.startsWith('type:'));
            const priorityLabel = issue.labels.find(l => l.name.startsWith('priority:'));
            
            const type = typeLabel ? typeLabel.name.replace('type: ', '') : 'feature';
            const priority = priorityLabel ? priorityLabel.name.replace('priority: ', '') : 'medium';
            
            // Determine branch prefix
            const prefixMap = {
              'bug': 'fix',
              'feature': 'feature',
              'enhancement': 'feature',
              'docs': 'docs',
              'refactor': 'chore'
            };
            const prefix = prefixMap[type] || 'feature';
            
            // Check if title contains non-ASCII characters
            const hasNonAscii = /[^\x00-\x7F]/.test(issue.title);
            let slug = 'issue';
            
            if (!hasNonAscii) {
              // Convert title to slug
              slug = issue.title
                .toLowerCase()
                .replace(/[^a-z0-9]+/g, '-')
                .replace(/^-+|-+$/g, '')
                .substring(0, 30);
            }
            
            const branchName = `${prefix}/#${issueNumber}-${slug}`;
            
            core.setOutput('branch_name', branchName);
            core.setOutput('issue_title', issue.title);
            core.setOutput('issue_type', type);
            core.setOutput('issue_priority', priority);
            
            console.log(`üìã Title: ${issue.title}`);
            console.log(`üè∑Ô∏è Type: ${type}`);
            console.log(`üéØ Priority: ${priority}`);
            console.log(`üåø Branch: ${branchName}`);
            
            return issue;
            
      - name: Create and push branch
        id: branch
        run: |
          FROM_BRANCH="${{ steps.base_branch.outputs.from_branch }}"
          NEW_BRANCH="${{ steps.issue.outputs.branch_name }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Fetch latest
          git fetch origin
          
          # Check if from branch exists
          if ! git show-ref --verify --quiet "refs/remotes/origin/${FROM_BRANCH}"; then
            echo "‚ùå Base branch '${FROM_BRANCH}' does not exist"
            exit 1
          fi
          
          # Check if new branch already exists
          if git show-ref --verify --quiet "refs/remotes/origin/${NEW_BRANCH}"; then
            echo "‚ö†Ô∏è Branch '${NEW_BRANCH}' already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
          else
            # Create new branch from base
            git checkout -b "${NEW_BRANCH}" "origin/${FROM_BRANCH}"
            
            # Push the new branch
            git push -u origin "${NEW_BRANCH}"
            
            echo "‚úÖ Branch created and pushed"
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi
          
          echo "branch_name=${NEW_BRANCH}" >> $GITHUB_OUTPUT
          
      - name: Update issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ steps.parse.outputs.issue_number }};
            const branchName = '${{ steps.issue.outputs.branch_name }}';
            const fromBranch = '${{ steps.base_branch.outputs.from_branch }}';
            const branchExists = '${{ steps.branch.outputs.branch_exists }}' === 'true';
            
            // Assign to comment author if not assigned
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber)
            });
            
            if (!issue.assignees || issue.assignees.length === 0) {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: parseInt(issueNumber),
                assignees: [context.payload.comment.user.login]
              });
            }
            
            // Comment on issue
            let message = `### üöÄ Development Started\n\n`;
            
            if (branchExists) {
              message += `‚ö†Ô∏è **Branch already exists**: \`${branchName}\`\n\n`;
              message += `You can switch to it with:\n`;
            } else {
              message += `‚úÖ **Branch created**: \`${branchName}\`\n`;
              message += `üìå **Base branch**: \`${fromBranch}\`\n\n`;
              message += `### Next steps:\n`;
            }
            
            message += `\`\`\`bash\n`;
            message += `git fetch origin\n`;
            message += `git checkout ${branchName}\n`;
            message += `\`\`\`\n\n`;
            
            if (!branchExists) {
              message += `### When ready to submit:\n`;
              message += `1. Commit your changes\n`;
              message += `2. Push to the branch\n`;
              message += `3. Create a Pull Request to \`${fromBranch}\`\n`;
              message += `4. Link this issue in the PR description using \`Closes #${issueNumber}\`\n`;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueNumber),
              body: message
            });
            
      - name: Post summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = '${{ steps.parse.outputs.issue_number }}';
            const success = '${{ job.status }}' === 'success';
            
            let response;
            if (success) {
              const branchName = '${{ steps.issue.outputs.branch_name }}';
              const fromBranch = '${{ steps.base_branch.outputs.from_branch }}';
              const branchExists = '${{ steps.branch.outputs.branch_exists }}' === 'true';
              
              if (branchExists) {
                response = `‚ö†Ô∏è Branch \`${branchName}\` already exists. See Issue #${issueNumber} for details.`;
              } else {
                response = `‚úÖ Successfully started work on Issue #${issueNumber}\n` +
                          `üåø Branch: \`${branchName}\` (from \`${fromBranch}\`)`;
              }
            } else {
              response = `‚ùå Failed to start work on Issue #${issueNumber}. Check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`;
            }
            
            // Reply to the original comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: response
            });