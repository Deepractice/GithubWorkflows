name: Auto Create Changeset on PR

on:
  pull_request:
    types: [opened, reopened]
    branches: [develop, dev]

jobs:
  auto-changeset:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          
      - name: Check for existing changesets
        id: check
        run: |
          # Check if there's already a changeset for this PR
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          if ls .changeset/*-pr-${PR_NUMBER}-*.md 2>/dev/null | grep -q .; then
            echo "has_changeset=true" >> $GITHUB_OUTPUT
            echo "üìù Changeset already exists for PR #${PR_NUMBER}"
          else
            echo "has_changeset=false" >> $GITHUB_OUTPUT
            echo "üîç No changeset found for PR #${PR_NUMBER}"
          fi
          
      - name: Analyze commits
        if: steps.check.outputs.has_changeset == 'false'
        id: analyze
        run: |
          echo "üîç Analyzing commits to determine version type..."
          
          # Get base branch
          BASE_BRANCH="${{ github.base_ref }}"
          
          # Analyze commits between base and head
          VERSION_TYPE="patch"
          CHANGES=""
          
          # Get all commits in this PR
          COMMITS=$(git log origin/${BASE_BRANCH}..HEAD --oneline)
          
          while IFS= read -r commit; do
            echo "Analyzing: $commit"
            
            # Check for breaking changes
            if echo "$commit" | grep -qE "(BREAKING CHANGE:|!:)"; then
              VERSION_TYPE="major"
              CHANGES="${CHANGES}üí• Breaking: ${commit}\n"
            # Check for features
            elif echo "$commit" | grep -qE "^[a-f0-9]+ feat(\(.+?\))?:"; then
              if [ "$VERSION_TYPE" != "major" ]; then
                VERSION_TYPE="minor"
              fi
              CHANGES="${CHANGES}‚ú® Feature: ${commit}\n"
            # Check for fixes
            elif echo "$commit" | grep -qE "^[a-f0-9]+ fix(\(.+?\))?:"; then
              CHANGES="${CHANGES}üêõ Fix: ${commit}\n"
            # Check for performance improvements
            elif echo "$commit" | grep -qE "^[a-f0-9]+ perf(\(.+?\))?:"; then
              if [ "$VERSION_TYPE" == "patch" ]; then
                VERSION_TYPE="minor"
              fi
              CHANGES="${CHANGES}‚ö° Performance: ${commit}\n"
            fi
          done <<< "$COMMITS"
          
          echo "type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "changes=$CHANGES" >> $GITHUB_OUTPUT
          echo "‚úÖ Determined version type: $VERSION_TYPE"
          
      - name: Setup Node.js
        if: steps.check.outputs.has_changeset == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Create changeset
        if: steps.check.outputs.has_changeset == 'false'
        id: changeset
        run: |
          # Get package name
          PACKAGE_NAME=$(node -p "require('./package.json').name" 2>/dev/null || echo "package")
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          VERSION_TYPE="${{ steps.analyze.outputs.type }}"
          
          # Generate changeset filename
          TIMESTAMP=$(date +%s)
          FILENAME=".changeset/auto-pr-${PR_NUMBER}-${TIMESTAMP}.md"
          
          # Create changeset content
          cat > "$FILENAME" << EOF
          ---
          "${PACKAGE_NAME}": ${VERSION_TYPE}
          ---
          
          ${PR_TITLE}
          
          _Auto-generated changeset for PR #${PR_NUMBER}_
          EOF
          
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Created changeset: $FILENAME"
          
      - name: Commit and push changeset
        if: steps.check.outputs.has_changeset == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .changeset/*.md
          git commit -m "ü§ñ auto: add changeset for PR #${{ github.event.pull_request.number }}

          Auto-detected version bump: ${{ steps.analyze.outputs.type }}
          Generated by auto-create-changeset-on-pr workflow"
          
          git push origin HEAD:${{ github.head_ref }}
          
      - name: Comment on PR
        if: steps.check.outputs.has_changeset == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const versionType = '${{ steps.analyze.outputs.type }}';
            const filename = '${{ steps.changeset.outputs.filename }}';
            
            const emoji = {
              'patch': 'ü©π',
              'minor': '‚ú®',
              'major': 'üí•'
            }[versionType];
            
            const message = `### ü§ñ Auto Changeset Created
            
            I've automatically created a changeset for this PR.
            
            **Version bump**: ${emoji} ${versionType}
            **File**: \`${filename}\`
            
            ### Based on commit analysis:
            ${{ steps.analyze.outputs.changes }}
            
            ### Need to change it?
            You can:
            1. Edit the changeset file directly
            2. Delete it and run \`/changeset [patch|minor|major]\` manually
            3. Let it be and it will be consumed when release is created
            
            ---
            _This is an automated action when PR is opened to ${github.base_ref}_
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });