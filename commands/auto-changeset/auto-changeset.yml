name: Auto Changeset

on:
  pull_request:
    types: [opened]
    branches: [main, develop, dev]

jobs:
  auto-changeset:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Check for existing changesets
        id: check
        run: |
          # 检查是否已有 changeset（用户手动创建的）
          if ls .changeset/*.md 2>/dev/null | grep -v README.md | grep -v config.json; then
            echo "has_changeset=true" >> $GITHUB_OUTPUT
            echo "📝 Found existing changeset, skipping auto-generation"
          else
            echo "has_changeset=false" >> $GITHUB_OUTPUT
            echo "🤖 No changeset found, will auto-generate"
          fi
          
      - name: Analyze and generate changeset
        if: steps.check.outputs.has_changeset == 'false'
        id: generate
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          BASE_BRANCH: ${{ github.base_ref }}
        run: |
          echo "🔍 Analyzing PR changes..."
          
          # 运行自动生成脚本
          if [ -f "scripts/auto-changeset.js" ]; then
            node scripts/auto-changeset.js
          else
            # 如果项目没有脚本，使用内联版本
            cat << 'EOF' > /tmp/auto-changeset.js
          const { execSync } = require('child_process');
          const fs = require('fs');
          const path = require('path');
          
          function analyzeCommits(baseBranch) {
            try {
              const commits = execSync(`git log origin/${baseBranch}..HEAD --oneline`, { encoding: 'utf-8' });
              let versionType = 'patch';
              const changes = [];
              
              commits.split('\n').forEach(commit => {
                if (!commit) return;
                if (commit.includes('BREAKING CHANGE:') || commit.includes('!:')) {
                  versionType = 'major';
                } else if (commit.match(/feat(\(.+?\))?:/)) {
                  if (versionType !== 'major') versionType = 'minor';
                } else if (commit.match(/fix(\(.+?\))?:/)) {
                  // Keep as patch
                }
              });
              
              return versionType;
            } catch (error) {
              return 'patch';
            }
          }
          
          const prTitle = process.env.PR_TITLE || 'Update';
          const prBody = process.env.PR_BODY || '';
          const baseBranch = process.env.BASE_BRANCH || 'main';
          
          const versionType = analyzeCommits(baseBranch);
          
          // 获取包名
          const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf-8'));
          const packageName = packageJson.name || 'package';
          
          // 生成 changeset
          const changesetDir = '.changeset';
          if (!fs.existsSync(changesetDir)) {
            fs.mkdirSync(changesetDir, { recursive: true });
          }
          
          const filename = `auto-${Date.now()}.md`;
          const content = `---
          "${packageName}": ${versionType}
          ---
          
          ${prTitle}
          
          ${prBody ? prBody.split('\n').slice(0, 5).join('\n') : ''}
          `;
          
          fs.writeFileSync(path.join(changesetDir, filename), content);
          console.log(`✅ Created changeset: ${filename} (${versionType})`);
          console.log(`version_type=${versionType}`);
          EOF
            node /tmp/auto-changeset.js
          fi
          
      - name: Commit changeset
        if: steps.check.outputs.has_changeset == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .changeset/*.md
          git commit -m "🤖 auto: add changeset for PR #${{ github.event.pull_request.number }}"
          git push origin HEAD:${{ github.head_ref }}
          
      - name: Comment on PR
        if: steps.check.outputs.has_changeset == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const message = `### 🤖 Auto Changeset Generated
            
            I've automatically generated a changeset for this PR based on:
            - Commit messages analysis
            - Files changed
            - PR title and description
            
            **You can override this by running \`/changeset\` command to create your own.**
            
            The auto-generated changeset suggests a **${process.env.VERSION_TYPE || 'patch'}** version bump.
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });