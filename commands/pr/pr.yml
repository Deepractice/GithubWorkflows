name: PR Command

on:
  issue_comment:
    types: [created]

jobs:
  create-pr:
    if: |
      github.event.issue.pull_request == null &&
      startsWith(github.event.comment.body, '/pr')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Parse command
        id: parse
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body;
            console.log('Parsing command:', comment);
            
            // Extract parameters using regex
            const sourceMatch = comment.match(/--source\s+([^\s]+)/);
            const targetMatch = comment.match(/--target\s+([^\s]+)/);
            const titleMatch = comment.match(/--title\s+"([^"]+)"/);
            const contentMatch = comment.match(/--content\s+"([^"]+)"/);
            const draftMatch = comment.match(/--draft/);
            
            // Set outputs
            core.setOutput('source', sourceMatch ? sourceMatch[1] : '');
            core.setOutput('target', targetMatch ? targetMatch[1] : '');
            core.setOutput('title', titleMatch ? titleMatch[1] : '');
            core.setOutput('content', contentMatch ? contentMatch[1] : '');
            core.setOutput('draft', draftMatch ? 'true' : 'false');
            
            console.log('Parsed parameters:');
            console.log(`  source: ${sourceMatch ? sourceMatch[1] : 'auto-detect'}`);
            console.log(`  target: ${targetMatch ? targetMatch[1] : 'auto-detect'}`);
            console.log(`  title: ${titleMatch ? titleMatch[1] : 'auto-generate'}`);
            console.log(`  content: ${contentMatch ? contentMatch[1] : 'auto-generate'}`);
            console.log(`  draft: ${draftMatch ? 'true' : 'false'}`);
            
      - name: Get issue details
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue.number;
            
            // Get issue details
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });
            
            core.setOutput('number', issueNumber);
            core.setOutput('title', issue.title);
            core.setOutput('body', issue.body || '');
            
            // Extract labels
            const labels = issue.labels.map(l => l.name);
            core.setOutput('labels', labels.join(','));
            
            console.log(`Issue #${issueNumber}: ${issue.title}`);
            return issue;
            
      - name: Detect source branch
        id: source
        run: |
          SOURCE="${{ steps.parse.outputs.source }}"
          ISSUE_NUMBER="${{ steps.issue.outputs.number }}"
          
          if [ -n "$SOURCE" ]; then
            echo "Using specified source branch: $SOURCE"
            # Verify branch exists
            if ! git show-ref --verify --quiet "refs/remotes/origin/$SOURCE"; then
              echo "‚ùå Source branch '$SOURCE' does not exist"
              exit 1
            fi
          else
            echo "Auto-detecting source branch for issue #$ISSUE_NUMBER"
            
            # List all remote branches
            git fetch origin
            BRANCHES=$(git branch -r | sed 's/origin\///' | grep -v HEAD)
            
            # Look for branches matching the issue number
            PATTERNS=(
              "feature/#${ISSUE_NUMBER}-"
              "fix/#${ISSUE_NUMBER}-"
              "docs/#${ISSUE_NUMBER}-"
              "chore/#${ISSUE_NUMBER}-"
            )
            
            for PATTERN in "${PATTERNS[@]}"; do
              for BRANCH in $BRANCHES; do
                if [[ "$BRANCH" == *"$PATTERN"* ]]; then
                  SOURCE="$BRANCH"
                  echo "Found matching branch: $SOURCE"
                  break 2
                fi
              done
            done
            
            if [ -z "$SOURCE" ]; then
              echo "‚ùå Could not find a branch for issue #$ISSUE_NUMBER"
              echo "Please specify source branch using --source parameter"
              exit 1
            fi
          fi
          
          echo "source=$SOURCE" >> $GITHUB_OUTPUT
          
      - name: Detect target branch
        id: target
        run: |
          TARGET="${{ steps.parse.outputs.target }}"
          SOURCE="${{ steps.source.outputs.source }}"
          
          if [ -n "$TARGET" ]; then
            echo "Using specified target branch: $TARGET"
            # Verify branch exists
            if ! git show-ref --verify --quiet "refs/remotes/origin/$TARGET"; then
              echo "‚ùå Target branch '$TARGET' does not exist"
              exit 1
            fi
          else
            echo "Auto-detecting target branch based on source: $SOURCE"
            
            # Get all branches
            BRANCHES=$(git branch -r | sed 's/origin\///' | grep -v HEAD)
            
            # Determine target based on source branch type
            if [[ "$SOURCE" == feature/* ]]; then
              # Features go to develop/dev/main
              for CANDIDATE in develop dev main master; do
                if echo "$BRANCHES" | grep -q "^$CANDIDATE$"; then
                  TARGET="$CANDIDATE"
                  break
                fi
              done
            elif [[ "$SOURCE" == fix/* ]] || [[ "$SOURCE" == hotfix/* ]]; then
              # Fixes go to main/master
              for CANDIDATE in main master; do
                if echo "$BRANCHES" | grep -q "^$CANDIDATE$"; then
                  TARGET="$CANDIDATE"
                  break
                fi
              done
            elif [[ "$SOURCE" == docs/* ]] || [[ "$SOURCE" == chore/* ]]; then
              # Docs and chores go to main/master
              for CANDIDATE in main master; do
                if echo "$BRANCHES" | grep -q "^$CANDIDATE$"; then
                  TARGET="$CANDIDATE"
                  break
                fi
              done
            fi
            
            # Fallback to default branch if not determined
            if [ -z "$TARGET" ]; then
              TARGET=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
              echo "Using default branch: $TARGET"
            fi
          fi
          
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          
      - name: Generate PR content
        id: content
        uses: actions/github-script@v7
        with:
          script: |
            const source = '${{ steps.source.outputs.source }}';
            const target = '${{ steps.target.outputs.target }}';
            const issueNumber = '${{ steps.issue.outputs.number }}';
            const issueTitle = `${{ steps.issue.outputs.title }}`;
            const issueBody = `${{ steps.issue.outputs.body }}`;
            const customTitle = `${{ steps.parse.outputs.title }}`;
            const customContent = `${{ steps.parse.outputs.content }}`;
            
            // Generate PR title
            let prTitle = customTitle;
            if (!prTitle) {
              // Auto-generate from issue title
              const typePrefix = source.split('/')[0];
              const typeMap = {
                'feature': 'feat',
                'fix': 'fix',
                'docs': 'docs',
                'chore': 'chore'
              };
              const prefix = typeMap[typePrefix] || 'feat';
              prTitle = `${prefix}: ${issueTitle}`;
            }
            
            // Generate PR body
            let prBody = customContent;
            if (!prBody) {
              // Auto-generate content
              prBody = `## üìã Ê¶ÇËø∞\n${issueTitle}\n\n`;
              prBody += `## üîó ÂÖ≥ËÅî Issue\nCloses #${issueNumber}\n\n`;
              
              if (issueBody) {
                // Add issue description summary
                const summary = issueBody.split('\n').slice(0, 5).join('\n');
                prBody += `## üìù ÊèèËø∞\n${summary}\n\n`;
              }
              
              // Get commit messages between branches
              prBody += `## ‚úÖ Êèê‰∫§ËÆ∞ÂΩï\n`;
              prBody += `Êü•Áúã [Êèê‰∫§ÂéÜÂè≤](https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${target}...${source})\n\n`;
              
              prBody += `## üß™ ÊµãËØïÊ∏ÖÂçï\n`;
              prBody += `- [ ] ‰ª£Á†ÅÂ∑≤Ëá™Êµã\n`;
              prBody += `- [ ] Áõ∏ÂÖ≥ÊµãËØïÂ∑≤ÈÄöËøá\n`;
              prBody += `- [ ] ÊñáÊ°£Â∑≤Êõ¥Êñ∞ÔºàÂ¶ÇÈúÄË¶ÅÔºâ\n\n`;
              
              prBody += `---\n`;
              prBody += `*Ê≠§ PR Áî± /pr ÂëΩ‰ª§Ëá™Âä®ÂàõÂª∫*`;
            }
            
            core.setOutput('title', prTitle);
            core.setOutput('body', prBody);
            
            console.log('Generated PR title:', prTitle);
            console.log('Generated PR body:', prBody.substring(0, 200) + '...');
            
      - name: Get commits between branches
        id: commits
        run: |
          SOURCE="${{ steps.source.outputs.source }}"
          TARGET="${{ steps.target.outputs.target }}"
          
          echo "Getting commits from $TARGET to $SOURCE"
          
          # Get commit count
          COMMIT_COUNT=$(git rev-list --count origin/$TARGET..origin/$SOURCE 2>/dev/null || echo "0")
          echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
          
          if [ "$COMMIT_COUNT" -eq "0" ]; then
            echo "‚ö†Ô∏è No new commits found between $TARGET and $SOURCE"
          else
            echo "Found $COMMIT_COUNT new commits"
            
            # Get commit messages
            COMMITS=$(git log --oneline origin/$TARGET..origin/$SOURCE 2>/dev/null | head -10 || echo "")
            echo "commits<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMITS" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          
      - name: Create pull request
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const source = '${{ steps.source.outputs.source }}';
            const target = '${{ steps.target.outputs.target }}';
            const title = `${{ steps.content.outputs.title }}`;
            const body = `${{ steps.content.outputs.body }}`;
            const draft = '${{ steps.parse.outputs.draft }}' === 'true';
            const issueNumber = '${{ steps.issue.outputs.number }}';
            const labels = '${{ steps.issue.outputs.labels }}'.split(',').filter(l => l);
            const commitCount = '${{ steps.commits.outputs.commit_count }}';
            
            // Check if PR already exists
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${source}`,
              base: target,
              state: 'open'
            });
            
            if (pulls.length > 0) {
              const existingPR = pulls[0];
              console.log(`PR already exists: #${existingPR.number}`);
              core.setOutput('number', existingPR.number);
              core.setOutput('url', existingPR.html_url);
              core.setOutput('exists', 'true');
              return existingPR;
            }
            
            // Check commit count
            if (commitCount === '0') {
              core.setFailed(`No commits to create PR from ${source} to ${target}`);
              return;
            }
            
            // Create new PR
            try {
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                head: source,
                base: target,
                draft: draft
              });
              
              console.log(`Created PR #${pr.number}`);
              core.setOutput('number', pr.number);
              core.setOutput('url', pr.html_url);
              core.setOutput('exists', 'false');
              
              // Add labels if any
              if (labels.length > 0) {
                try {
                  await github.rest.issues.addLabels({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: pr.number,
                    labels: labels
                  });
                  console.log('Added labels:', labels.join(', '));
                } catch (e) {
                  console.log('Failed to add labels:', e.message);
                }
              }
              
              // Add assignee
              try {
                await github.rest.issues.addAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  assignees: [context.payload.comment.user.login]
                });
              } catch (e) {
                console.log('Failed to add assignee:', e.message);
              }
              
              return pr;
            } catch (error) {
              console.error('Failed to create PR:', error);
              core.setFailed(`Failed to create PR: ${error.message}`);
            }
            
      - name: Comment result
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const success = '${{ job.status }}' === 'success';
            const prNumber = '${{ steps.pr.outputs.number }}';
            const prUrl = '${{ steps.pr.outputs.url }}';
            const prExists = '${{ steps.pr.outputs.exists }}' === 'true';
            const source = '${{ steps.source.outputs.source }}';
            const target = '${{ steps.target.outputs.target }}';
            const draft = '${{ steps.parse.outputs.draft }}' === 'true';
            
            let message;
            
            if (success && prNumber) {
              if (prExists) {
                message = `### ‚ö†Ô∏è Pull Request Â∑≤Â≠òÂú®\n\n`;
                message += `**PR**: #${prNumber}\n`;
                message += `**ÈìæÊé•**: ${prUrl}\n`;
                message += `**ÂàÜÊîØ**: \`${source}\` ‚Üí \`${target}\`\n`;
              } else {
                const icon = draft ? 'üìù' : '‚úÖ';
                const status = draft ? 'ËçâÁ®ø PR' : 'Pull Request';
                message = `### ${icon} ${status} ÂàõÂª∫ÊàêÂäüÔºÅ\n\n`;
                message += `**PR**: #${prNumber}\n`;
                message += `**ÈìæÊé•**: ${prUrl}\n`;
                message += `**Ê∫êÂàÜÊîØ**: \`${source}\`\n`;
                message += `**ÁõÆÊ†áÂàÜÊîØ**: \`${target}\`\n`;
                
                if (draft) {
                  message += `\n‚ö†Ô∏è ËøôÊòØ‰∏Ä‰∏™ËçâÁ®ø PRÔºåÂÆåÊàêÂºÄÂèëÂêéËØ∑ÁÇπÂáª "Ready for review" ÊåâÈíÆ„ÄÇ`;
                } else {
                  message += `\n‚úÖ PR Â∑≤ÂáÜÂ§áÂ•ΩÊé•ÂèóÂÆ°Êü•„ÄÇ`;
                }
                
                message += `\n\n### ÂêéÁª≠Ê≠•È™§\n`;
                message += `1. Á≠âÂæÖ CI Ê£ÄÊü•ÈÄöËøá\n`;
                message += `2. ËØ∑Ê±Ç‰ª£Á†ÅÂÆ°Êü•\n`;
                message += `3. ÂêàÂπ∂Âà∞ \`${target}\` ÂàÜÊîØ\n`;
              }
            } else {
              message = `### ‚ùå ÂàõÂª∫ Pull Request Â§±Ë¥•\n\n`;
              
              // Add error details based on what failed
              const commitCount = '${{ steps.commits.outputs.commit_count }}';
              if (commitCount === '0') {
                message += `**ÂéüÂõ†**: \`${source}\` Âíå \`${target}\` ‰πãÈó¥Ê≤°ÊúâÊñ∞ÁöÑÊèê‰∫§\n\n`;
                message += `ËØ∑Á°Æ‰øùÔºö\n`;
                message += `1. Ê∫êÂàÜÊîØÊúâÊñ∞ÁöÑÊèê‰∫§\n`;
                message += `2. Ê∫êÂàÜÊîØÂ∑≤Êé®ÈÄÅÂà∞ËøúÁ®ã‰ªìÂ∫ì\n`;
              } else if (!source) {
                message += `**ÂéüÂõ†**: Êó†Ê≥ïÊ£ÄÊµãÊ∫êÂàÜÊîØ\n\n`;
                message += `ËØ∑‰ΩøÁî® \`--source\` ÂèÇÊï∞ÊåáÂÆöÊ∫êÂàÜÊîØÔºö\n`;
                message += `\`\`\`\n/pr --source feature/#${context.issue.number}-xxx\n\`\`\``;
              } else {
                message += `ËØ∑Êü•Áúã [Â∑•‰ΩúÊµÅÊó•Âøó](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) ‰∫ÜËß£ËØ¶ÊÉÖ„ÄÇ`;
              }
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });